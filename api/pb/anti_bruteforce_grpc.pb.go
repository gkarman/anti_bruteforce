// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: anti_bruteforce.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AntiBruteforceService_IsCanLogin_FullMethodName              = "/anti_bruteforce.AntiBruteforceService/isCanLogin"
	AntiBruteforceService_ClearBucket_FullMethodName             = "/anti_bruteforce.AntiBruteforceService/clearBucket"
	AntiBruteforceService_AddCIDRToWhiteList_FullMethodName      = "/anti_bruteforce.AntiBruteforceService/AddCIDRToWhiteList"
	AntiBruteforceService_AddCIDRToBlackList_FullMethodName      = "/anti_bruteforce.AntiBruteforceService/AddCIDRToBlackList"
	AntiBruteforceService_DeleteCIDRFromBlackList_FullMethodName = "/anti_bruteforce.AntiBruteforceService/DeleteCIDRFromBlackList"
	AntiBruteforceService_DeleteCIDRFromWhiteList_FullMethodName = "/anti_bruteforce.AntiBruteforceService/DeleteCIDRFromWhiteList"
)

// AntiBruteforceServiceClient is the client API for AntiBruteforceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiBruteforceServiceClient interface {
	IsCanLogin(ctx context.Context, in *IsCanLoginRequest, opts ...grpc.CallOption) (*IsCanLoginResponse, error)
	ClearBucket(ctx context.Context, in *ClearBucketRequest, opts ...grpc.CallOption) (*ClearBucketResponse, error)
	AddCIDRToWhiteList(ctx context.Context, in *AddCIDRToWhiteListRequest, opts ...grpc.CallOption) (*AddCIDRToWhiteListResponse, error)
	AddCIDRToBlackList(ctx context.Context, in *AddCIDRToBlackListRequest, opts ...grpc.CallOption) (*AddCIDRToBlackListResponse, error)
	DeleteCIDRFromBlackList(ctx context.Context, in *DeleteCIDRFromBlackListRequest, opts ...grpc.CallOption) (*DeleteCIDRFromBlackListResponse, error)
	DeleteCIDRFromWhiteList(ctx context.Context, in *DeleteCIDRFromWhiteListRequest, opts ...grpc.CallOption) (*DeleteCIDRFromWhiteListResponse, error)
}

type antiBruteforceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiBruteforceServiceClient(cc grpc.ClientConnInterface) AntiBruteforceServiceClient {
	return &antiBruteforceServiceClient{cc}
}

func (c *antiBruteforceServiceClient) IsCanLogin(ctx context.Context, in *IsCanLoginRequest, opts ...grpc.CallOption) (*IsCanLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsCanLoginResponse)
	err := c.cc.Invoke(ctx, AntiBruteforceService_IsCanLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceServiceClient) ClearBucket(ctx context.Context, in *ClearBucketRequest, opts ...grpc.CallOption) (*ClearBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearBucketResponse)
	err := c.cc.Invoke(ctx, AntiBruteforceService_ClearBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceServiceClient) AddCIDRToWhiteList(ctx context.Context, in *AddCIDRToWhiteListRequest, opts ...grpc.CallOption) (*AddCIDRToWhiteListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCIDRToWhiteListResponse)
	err := c.cc.Invoke(ctx, AntiBruteforceService_AddCIDRToWhiteList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceServiceClient) AddCIDRToBlackList(ctx context.Context, in *AddCIDRToBlackListRequest, opts ...grpc.CallOption) (*AddCIDRToBlackListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCIDRToBlackListResponse)
	err := c.cc.Invoke(ctx, AntiBruteforceService_AddCIDRToBlackList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceServiceClient) DeleteCIDRFromBlackList(ctx context.Context, in *DeleteCIDRFromBlackListRequest, opts ...grpc.CallOption) (*DeleteCIDRFromBlackListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCIDRFromBlackListResponse)
	err := c.cc.Invoke(ctx, AntiBruteforceService_DeleteCIDRFromBlackList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceServiceClient) DeleteCIDRFromWhiteList(ctx context.Context, in *DeleteCIDRFromWhiteListRequest, opts ...grpc.CallOption) (*DeleteCIDRFromWhiteListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCIDRFromWhiteListResponse)
	err := c.cc.Invoke(ctx, AntiBruteforceService_DeleteCIDRFromWhiteList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiBruteforceServiceServer is the server API for AntiBruteforceService service.
// All implementations must embed UnimplementedAntiBruteforceServiceServer
// for forward compatibility.
type AntiBruteforceServiceServer interface {
	IsCanLogin(context.Context, *IsCanLoginRequest) (*IsCanLoginResponse, error)
	ClearBucket(context.Context, *ClearBucketRequest) (*ClearBucketResponse, error)
	AddCIDRToWhiteList(context.Context, *AddCIDRToWhiteListRequest) (*AddCIDRToWhiteListResponse, error)
	AddCIDRToBlackList(context.Context, *AddCIDRToBlackListRequest) (*AddCIDRToBlackListResponse, error)
	DeleteCIDRFromBlackList(context.Context, *DeleteCIDRFromBlackListRequest) (*DeleteCIDRFromBlackListResponse, error)
	DeleteCIDRFromWhiteList(context.Context, *DeleteCIDRFromWhiteListRequest) (*DeleteCIDRFromWhiteListResponse, error)
	mustEmbedUnimplementedAntiBruteforceServiceServer()
}

// UnimplementedAntiBruteforceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAntiBruteforceServiceServer struct{}

func (UnimplementedAntiBruteforceServiceServer) IsCanLogin(context.Context, *IsCanLoginRequest) (*IsCanLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCanLogin not implemented")
}
func (UnimplementedAntiBruteforceServiceServer) ClearBucket(context.Context, *ClearBucketRequest) (*ClearBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearBucket not implemented")
}
func (UnimplementedAntiBruteforceServiceServer) AddCIDRToWhiteList(context.Context, *AddCIDRToWhiteListRequest) (*AddCIDRToWhiteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCIDRToWhiteList not implemented")
}
func (UnimplementedAntiBruteforceServiceServer) AddCIDRToBlackList(context.Context, *AddCIDRToBlackListRequest) (*AddCIDRToBlackListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCIDRToBlackList not implemented")
}
func (UnimplementedAntiBruteforceServiceServer) DeleteCIDRFromBlackList(context.Context, *DeleteCIDRFromBlackListRequest) (*DeleteCIDRFromBlackListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCIDRFromBlackList not implemented")
}
func (UnimplementedAntiBruteforceServiceServer) DeleteCIDRFromWhiteList(context.Context, *DeleteCIDRFromWhiteListRequest) (*DeleteCIDRFromWhiteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCIDRFromWhiteList not implemented")
}
func (UnimplementedAntiBruteforceServiceServer) mustEmbedUnimplementedAntiBruteforceServiceServer() {}
func (UnimplementedAntiBruteforceServiceServer) testEmbeddedByValue()                               {}

// UnsafeAntiBruteforceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiBruteforceServiceServer will
// result in compilation errors.
type UnsafeAntiBruteforceServiceServer interface {
	mustEmbedUnimplementedAntiBruteforceServiceServer()
}

func RegisterAntiBruteforceServiceServer(s grpc.ServiceRegistrar, srv AntiBruteforceServiceServer) {
	// If the following call pancis, it indicates UnimplementedAntiBruteforceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AntiBruteforceService_ServiceDesc, srv)
}

func _AntiBruteforceService_IsCanLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCanLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServiceServer).IsCanLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteforceService_IsCanLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServiceServer).IsCanLogin(ctx, req.(*IsCanLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforceService_ClearBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServiceServer).ClearBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteforceService_ClearBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServiceServer).ClearBucket(ctx, req.(*ClearBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforceService_AddCIDRToWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCIDRToWhiteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServiceServer).AddCIDRToWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteforceService_AddCIDRToWhiteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServiceServer).AddCIDRToWhiteList(ctx, req.(*AddCIDRToWhiteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforceService_AddCIDRToBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCIDRToBlackListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServiceServer).AddCIDRToBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteforceService_AddCIDRToBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServiceServer).AddCIDRToBlackList(ctx, req.(*AddCIDRToBlackListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforceService_DeleteCIDRFromBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCIDRFromBlackListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServiceServer).DeleteCIDRFromBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteforceService_DeleteCIDRFromBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServiceServer).DeleteCIDRFromBlackList(ctx, req.(*DeleteCIDRFromBlackListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforceService_DeleteCIDRFromWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCIDRFromWhiteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServiceServer).DeleteCIDRFromWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteforceService_DeleteCIDRFromWhiteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServiceServer).DeleteCIDRFromWhiteList(ctx, req.(*DeleteCIDRFromWhiteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiBruteforceService_ServiceDesc is the grpc.ServiceDesc for AntiBruteforceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiBruteforceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anti_bruteforce.AntiBruteforceService",
	HandlerType: (*AntiBruteforceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "isCanLogin",
			Handler:    _AntiBruteforceService_IsCanLogin_Handler,
		},
		{
			MethodName: "clearBucket",
			Handler:    _AntiBruteforceService_ClearBucket_Handler,
		},
		{
			MethodName: "AddCIDRToWhiteList",
			Handler:    _AntiBruteforceService_AddCIDRToWhiteList_Handler,
		},
		{
			MethodName: "AddCIDRToBlackList",
			Handler:    _AntiBruteforceService_AddCIDRToBlackList_Handler,
		},
		{
			MethodName: "DeleteCIDRFromBlackList",
			Handler:    _AntiBruteforceService_DeleteCIDRFromBlackList_Handler,
		},
		{
			MethodName: "DeleteCIDRFromWhiteList",
			Handler:    _AntiBruteforceService_DeleteCIDRFromWhiteList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "anti_bruteforce.proto",
}
